name: Canary Build Tests
on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering
  pull_request:
    paths:
      - '.github/workflows/canary-test.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover-canary:
    runs-on: ubuntu-latest
    outputs:
      conda-spec: ${{ steps.discover.outputs.conda-spec }}
      python-versions: ${{ steps.discover.outputs.python-versions }}
      aau-spec: ${{ steps.discover.outputs.aau-spec }}
    steps:
    - name: Discover latest canary build
      id: discover
      shell: '/usr/share/miniconda/bin/python {0}'
      run: |
        # Search for conda packages in canary channel
        import json, sys, io, os, re
        from conda.cli.main import main
        from conda.models.version import normalized_version

        _stdout, sys.stdout = sys.stdout, io.StringIO()
        main('search', '-c', 'conda-canary', '-c', 'conda-canary/label/dev', '--override-channels', 'conda', '--json')
        c_data, sys.stdout = sys.stdout.getvalue(), io.StringIO()
        main('search', '-c', 'ctools', '-c', 'ctools/label/dev', '--override-channels', 'anaconda-anon-usage', '--json')
        a_data, sys.stdout = sys.stdout.getvalue(), _stdout

        c_data = json.loads(c_data)['conda']
        if not c_data:
          sys.exit(0)

        max_version = sorted((d['version'] for d in c_data), key=normalized_version)[-1]
        channel = [d['channel'] for d in c_data if d['version'] == max_version]
        channel = '/'.join(channel[0].split('/')[3:-1])
        cspec = f'conda-spec={channel}::conda={max_version}'

        builds = [b['build'] for b in c_data if b['version'] == max_version]
        py_versions = set(re.sub(r'py3(\d+).*', r'3.\1', b) for b in builds)
        py_versions = json.dumps(sorted(py_versions, key=normalized_version))
        pspec = f'python-versions={py_versions}'

        a_data = json.loads(a_data)['anaconda-anon-usage']
        max_version = sorted((d['version'] for d in a_data), key=normalized_version)[-1]
        channel = [d['channel'] for d in a_data if d['version'] == max_version]
        channel = '/'.join(channel[0].split('/')[3:-1])
        aspec = f'aau-spec={channel}::anaconda-anon-usage={max_version}'

        specs = f"{cspec}\n{pspec}\n{aspec}\n"
        print(specs)
        with open(os.getenv("GITHUB_OUTPUT"), "a") as fp:
            fp.write(specs)

  test:
    needs: discover-canary
    if: needs.discover-canary.outputs.aau-spec != '' && needs.discover-canary.outputs.conda-spec != ''
    env:
      ANACONDA_ANON_USAGE_DEBUG: 1
      ANACONDA_ANON_USAGE_RAISE: 1
      PYTHONUNBUFFERED: 1
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ${{ fromJson(needs.discover-canary.outputs.python-versions) }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Retrieve the source code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
      with:
        miniconda-version: 'latest'
        auto-activate-base: true
        activate-environment: ''
        channels: defaults
    - name: Build test environment
      run: |
        cspec=${{ needs.discover-canary.outputs.conda-spec }}
        aspec=${{ needs.discover-canary.outputs.aau-spec }}
        pspec="python=${{ matrix.python-version }}"
        echo "-----------------------------"
        echo "CREATING BASE: $cspec $aspec $pspec"
        echo "-----------------------------"
        conda create -p ./testenv $aspec $cspec $pspec --file tests/requirements.txt
        echo "-------------------------"
        echo "CREATING TEST CHILD ENV 1"
        echo "-------------------------"
        mkdir -p ./testenv/envs
        conda create -p ./testenv/envs/testchild1 python --yes
        echo "-------------------------"
        echo "CREATING TEST CHILD ENV 2"
        echo "-------------------------"
        conda create -p ./testenv/envs/testchild2 python --yes
        if [ -f ./testenv/Scripts/conda.exe ]; then \
           sed -i.bak "s@CONDA_EXE=.*@CONDA_EXE=$PWD/testenv/Scripts/conda.exe@" testenv/etc/profile.d/conda.sh; \
        fi
        conda config --set solver classic
    - name: Test code
      run: |
        source testenv/etc/profile.d/conda.sh
        conda activate base
        conda info 2>&1 | tee output.txt
        if grep -q 'Error loading' output.txt; then exit -1; fi
        pytest
        python tests/integration/test_config.py
    - name: Test heartbeats (pwsh)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        .\testenv\shell\condabin\conda-hook.ps1
        conda activate base
        python tests\integration\test_heartbeats.py powershell
    - name: Test heartbeats (cmd)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        call .\testenv\Scripts\activate.bat
        if %errorlevel% neq 0 exit 1
        python tests\integration\test_heartbeats.py cmd.exe
        if %errorlevel% neq 0 exit 1
    - name: Test heartbeats (bash)
      if: matrix.os != 'windows-latest'
      run: |
        source ./testenv/bin/activate
        conda info
        python tests/integration/test_heartbeats.py posix

  report:
    needs: [discover-canary, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Report results
      run: |
        CONDA_VERSION="${{ needs.discover-canary.outputs.conda-version }}"
        PYTHON_VERSIONS="${{ needs.discover-canary.outputs.python-versions }}"
        AAU_VERSION="${{ needs.discover-canary.outputs.aau-version }}"
        AAU_CHANNEL="${{ needs.discover-canary.outputs.aau-channel }}"
        TEST_RESULT="${{ needs.test.result }}"

        echo "## Canary Build Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check if builds were found
        if [ -z "$CONDA_VERSION" ] || [ -z "$AAU_VERSION" ]; then
          echo "ℹ️ No canary builds available - tests skipped" >> $GITHUB_STEP_SUMMARY
          if [ -z "$CONDA_VERSION" ]; then
            echo "- No conda canary builds found in conda-canary/label/dev" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -z "$AAU_VERSION" ]; then
            echo "- No anaconda-anon-usage builds found in ctools channels" >> $GITHUB_STEP_SUMMARY
          fi
          exit 0
        fi

        echo "- **Conda Version:** $CONDA_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Versions Tested:** $PYTHON_VERSIONS" >> $GITHUB_STEP_SUMMARY
        echo "- **anaconda-anon-usage Version:** $AAU_VERSION (from $AAU_CHANNEL)" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Result:** $TEST_RESULT" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "$TEST_RESULT" != "success" ]; then
          echo "⚠️ Tests failed for conda canary build $CONDA_VERSION" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All tests passed for conda canary build $CONDA_VERSION" >> $GITHUB_STEP_SUMMARY
        fi
